-- * 오라클 자료형 타입

1. 정수형 타입
   - number(2)는 총자리수가 2자리인 정수형 값이 필드에 저장된다.

2. 실수형 타입
   - number(6, 2)는 소수점을 포함한 총자리수가 6자리이고,
       소수점 둘째자리까지 있는 실수형 값이 저장된다.
   - 첫번째 인자값 6은 소수점을 포함한 총 자리수를 의미하고,
       두번째 인자값 2는 소수점 자리수를 의미한다.

3. 가변형 문자열
   - varchar2가 가변형 문자열 자료형이다.
   - 입력 데이터가 실제 크기를 넘어서면 넘어선 크기만큼
       자료형 크기가 늘어나지 않는다. 만약에 varchar2(10)으로
       만들어진 필드에는 10자리까지만 저장된다. 영문자로
      5자의 레코드를 삽입한다면 varchar2은 크기가 실제 레코드
       크기가 5인 만큼 줄어들어 저장된다.
   - 그러므로 기억장소 절약의 장점이 있다.

4. 고정형 문자열
   - char 자료형을 사용.
   - char(10)으로 만들어진 필드에 영문자 5크기 만큼 레코드를
       삽입한다면 char 자료형은 고정형이기 때문에 크기가 실제
       레코드만큼(10) 줄어들지 않고, 고정형으로 할당이 된다.


* 테이블명, 컬럼명 명명 규칙
  1. 반드시 문자로 시작해야 됨.
  2. 1~30자까지 가능함.
  3. A~Z까지의 대소문자와 0~9까지의 숫자 조합.
       특수 기호는 (_, $, #)만 포함 할 수 있음.
  4. 오라클에서 사용되는 예약어나 다른 객체명과 중복 불가.
  5. 공백 허용 안됨.

    cf) 오라클의 객체 : 테이블, 뷰, 시퀀스, 인덱스





    //삭제해도 임시보관되어 있는 파일을 완전히 삭제하는 명령
    drop table exam01 purge;





    --  * 오라클 - 트랜잭션(transation)
    ----     : 데이터 처리의 한 단위.
    ----     : 오라클에서 발생하는 여러 개의 SQL 명령문들을
    --          하나의 논리적인 작업 단위로 처리.
    ----     : 데이터의 일관성을 유지하면서 안정적으로 데이터를 복구.

    --     . commit : 명령어 완전 실행(DB 최종 적용).
    --     . rollback : 명령어 되돌리기(실행 해제).

    -- 유의 사항
    ---- . DDL 자동 트랜젝션이 적용(commit).
    ---- . DML : 정상적으로 종료되었다면 자동으로 commit.
    ---- . 정전이 발생하거나 컴퓨터가 다운시 자동으로 rollback.




-- * 오라클  : 데이터 무결성 제약 조건

--   1) 데이터 무결성 제약 조건(Data Integrity Constraint Rule)
--        :  테이블에 부적절한 자료(데이터)가 입력되는 것을 방지하기 위해서 테이블을 생성할 때
--           각 컬럼에 대해서 정의하는 여러가지 규칙을 의미.

--   2) 종류
---         . Not null/null : null을 허용할 지 아니면 반드시 데이터를 입력받게 할 건지의 조건.
---         . Unique : 지정된 컬럼에 중복되지 않고 유일한 값만 저장되는 조건.
---         . Primary key(기본키) : unique + not null
---         . Check : 특정한 값만 저장되는 필드 조건.
---         . Default : 기본값으로 특정 값이 저장되도록 설정하는 조건.
---         . Foreign key(외래키) : 다른 테이블의 컬럼에 들어있는 값만 저장을 허용하는 조건.

-- * USER_CONSTRAINTS 데이터 딕셔너리 뷰
--            : 제약 조건에 관한 정보를 알려 줌.

SQL>desc USER_CONSTRAINTS; -- [command] 창에서 확인할 것.
--       - owner : 제약 조건을 소유한 사용자명을 저장하는 컬럼.
--       - constraint_name : 제약 조건명을 저장하는 컬럼.
--       - constraint_type : 제약 조건 유형을 저장하는 컬럼.
--           . P : primary key
--           . R : foreign key
--           . U : unique
--           . C : check, not null
--       - table_name : 각 제약 조건들이 속한 테이블의 이름.
--       - search_condition : 어떤 내용이 조건으로 사용되었는지 설명.
--       - r_constraint_name : 제약 조건이 foreingkey인 경우
--                          어떤 primary key를 참조했는지를 대한 정보를 가짐.





create table emp07(
empno   number(4) constraint emp07_empno_pk primary key,
ename   varchar2(20)constraint emp07_ename_nn not null,
sal     number(7,2) constraint emp07_sal_ck check(sal between 500 and 5000),
gender  varchar2(1) constraint emp07_gender_ck check(gender in ('M','F'))
);

insert into emp07 values(1234, '홍길동', 6000, 'F'); --error
insert into emp07 values(1234, '홍길동', 4000, 'N'); --error


create table dept08(
deptno   number(4) constraint dept08_deptno_pk primary key,
dname   varchar2(20) constraint dept08_dname_nn not null,
loc     varchar2(20) default 'SEOUL'
);

insert into dept08 (deptno, dname) values (1234, 'ACCOUNTING')



create table emp08(
empno   number(4)  constraint emp08_empno_pk primary key,
ename   varchar2(20) not null,
job     varchar2(20),
deptno  number(2) constraint emp08_deptno_fk references dept06(deptno)
);

create table emp09(
empno   number(4) ,
ename   varchar2(20) not null,
job     varchar2(20),
deptno  number(2),
constraint emp09_empno_pk primary key(empno),
constraint emp09_deptno_fk references dept06(deptno)
);

create table emp09(
empno   number(4) ,
ename   varchar2(20),
job     varchar2(20),
deptno  number(2)
);
alter table emp10
add constraint emp10_empno_pk primary key(empno);

alter table emp10
add constraint emp10_empno_pk
foreign key(deptno) references dept08(deptno);

alter table emp10
modify ename constraint emp10_ename_nn not null;

alter table emp10
drop primary key;



alter table emp06
disable constraint emp06_depno_fk;


alter table emp06
enable constraint emp06_depno_fk;


column r_constraint_name format a10;

-- * 오라클 - 뷰(View)
--     - 물리적인 테이블에 근거한 논리적인 가상 테이블.
--     - 가상이란 단어는 실질적으로 데이터를 저장하고 있지 않기 때문에 붙인 것이고,
--       테이블이란 단어는 실질적으로 데이터를 저장하고 있지 않더라도 사용 계정자는 마치
--       테이블을 사용하는 것과 동일하게 뷰를 사용할 수 있기 때문에 붙인 것.
--     - 뷰는 기본테이블에서 파생된 객체로서 기본테이블에 대한 하나의 쿼리문임.
--     - 실제 테이블에 저장된 데이터를 뷰를 통해서 볼 수 있도록 함.
--     - 사용자에게 주어진 뷰를 통해서 기본 테이블을 제한적으로 사용하게 됨.
--     - 뷰는 이미 존재하고 있는 테이블에 제한적으로 접근하도록 한다.
--     - 뷰를 생성하기 위해서는 실질적으로 데이터를 저장하고 있는 물리적인 테이블이
--        존재해야 되는데 이 테이블은 기본테이블이라고 한다.


--[2] 뷰(view) 정의하기
----  . 뷰를 생성하기 위해서는 create view로 시작함.
----  . as 다음은 마치 서브쿼리문과 유사함.
----  .서브쿼리는 우리가 지금까지 사용하였던 select문을
----    기술하면 됨.

----  만일 30번 부서에 소속된 사원들의 사번과 이름과
--     부서번호를 자주 검색한다고 가정하면

create view emp_view30
as
select empno, ename, deptno from emp_copy
where deptno = 30;



-------- . 위와 같이 결과를 출력하기 위해서 매번 select문을
--           입력하기란 여간 번거로운 일이 아닐 수 없음.
-------- . 뷰는 이와같이 번거로운 select문을 매번 입력하는
--            대신 보다 쉽게 원하는 결과를 얻고자 하는 바램에서
--            출발한 개념.

--[view를 생성할 수 있는 권한 부여]
conn system/admin1234;
show user;
grant create view to scott;

create view emp_view30
as
select empno, ename, deptno from emp_copy
where deptno = 30;

select * from emp_view30;






--[3] 뷰의 내부 구조와 user_views 데이터 딕셔너리
SQL>desc user_views;
SQL>select view_name, text from user_views;


--[4] 뷰의 동작원리
----   1. 사용자가 뷰에 대해서 질의를 하면 user_views에서
--          뷰에 대한 정의를 조회한다.
----   2. 기본 테이블에 대한 뷰의 접근 권한을 살핀다.
----   3. 뷰에 대한 질의를 기본테이블에 대한 질의로 변환.
----   4. 기본 테이블에 대한 질의를 통해 데이터를 검색.
----   5. 검색된 결과를 출력한다.

--[5] 뷰와 기본 테이블 관계 파악
---- 1. 뷰를 통한 데이터 저장이 가능?






---- 2. insert문에 뷰(emp_view30)를 사용하였지만, 뷰는
--        쿼리문에 대한 이름일 뿐 새로운 레코드는 기본 테이블
--        (emp_copy)에 실질적으로 추가되는 것이다.

---- 3. 뷰는 실질적인 데이터를 저장한 기본 테이블을 볼 수
--        있도록한 투명한 창이다. 즉, 기본 테이블의 모양이 바
--        뀐 것이고 그 바뀐 내용을 뷰라는 창을 통해서 볼
--        뿐이다. 뷰에 insert뿐만 아니라, update, delete 모두
--        사용 할 수 있는데, 이 명령문 역시 뷰의 텍스트에
--        저장되어 있는 기본 테이블을 변경하는 것이다.

--[6] 뷰를 사용하는 이유
----  1. 복잡하고 긴 쿼리문을 뷰로 정의하면 접근을 단순화
--         시킬 수 있다.
----  2. 보안에 유리하다.
--          - 사용자마다 특정 객체만 조회할 수 있도록 권한을
--             부여할 수 있기 때문.





-- [7] 뷰의 종류
----      : 뷰는 뷰를 정의하기 위해서 사용되는 기본 테이블의
--           수에 따라
--          - 단순 뷰(simple view)
--          - 복합 뷰(complex view)로 나눈다.

-------   - 특징
-------        . 단순 뷰
--                 - 하나의 테이블로 생성
--                 - 그룹함수의 사용이 불가능
--                 - distinct 사용이 불가능
--                 - insert/update/delete 등 사용 가능

-------        . 복합 뷰
--                 - 여러 개의 테이블로 생성
--                 - 그룹함수의 사용이 가능
--                 - distinct 사용이 가능
--                 - insert/update/delete 등 사용 불가능

---- [7-1] 단순 뷰에 대한 데이터 조작






---- [7-2] 단순 뷰의 컬럼에 별칭 부여하기
create view emp_view_copy(사원번호, 사원명, 급여, 부서번호)
as
select empno, ename, sal, deptno from emp_copy;

grant create view to scott;

create table emp_copy as (select * from emp);

select * from emp_copy


select * from emp_view_copy;






---- [7-3] 그룹 함수를 사용한 단순 뷰
--      중요) 뷰를 작성할 때 select 절 다음에 sum()이라는
--               그룹함수를 사용하면 결과를 뷰의 특정 컬럼처럼
--               사용하게 됨. 따라서 물리적인 컬럼이 존재하지
--               않는 가상 컬럼이기 때문에 컬럼명도 상속 받을
--               수 없음. 뷰를 생성할 때 가상 컬럼을 사용하려면
--               사용자가 반드시 이름을 따로 설정해야한다.

create view emp_view_copy
as
select deptno, sum(sal) as sum_sal, avg(sal) as avg_sal
from emp_copy
group by deptno;





--      주의) 단순뷰의 경우 insert/update/delete 명령어의
--              조작이 불가능한 경우
--              1. 뷰 정의에 포함되지 않은 컬럼 중에 기본 테이블의 컬럼이
--                  not null 제약 조건이 지정되어 있는 경우 insert문 사용 불가.
--              2. sal * 12 와 같은 산술 표현식으로 정의된
--                  가상 컬럼이 뷰에 정의되면 insert/update가
--                  불가능하다.
--              3. distinct를 포함한 경우에도 DML 명령 사용 불가-중복 데이터 하나만 가져옴.
--              3. 그룹함수나 group by 절을 포함한 경우에도 DML 명령 사용 불가.







---- [7-4] 복합 뷰







--[8] 뷰 삭제




--[9] 뷰 생성에 사용되는 다양한 옵션(or replace)
----   : 존재하지 않는 뷰이면 새로운 뷰를 생성하고, 기존에
--        존재하는 뷰이면 그 내용을 변경한다.






--[10] 뷰 생성에 사용되는 다양한 옵션(force/noforce)
----   force : 기본테이블이 존재하지 않을 때도 뷰를 생성
--                해야 하는 경우 사용하는 옵션.
create or replace force view employees_view
as
select empno, ename, deptno from employees
where deptno=30;

----   noforce : 기본테이블이 존재하는 경우만 뷰가 생성(default).
create or replace noforce view employees_view
as
select empno, ename, deptno from employees
where deptno=30;







--[11] 뷰 생성에 사용되는 다양한 옵션(with check option)
----  뷰를 생성할 때 조건 제시에 사용된 컬럼 값을 변경
--     못하도록 하는 기능.
----  뷰를 설정할 때 조건으로 설정한 컬럼이외의 다른 컬럼의
--     내용은 변경할 수 있음.















--[12] 뷰 생성에 사용되는 다양한 옵션(with read only)
----    : 기본 테이블의 어떤 컬럼에 대해서도 뷰를 통한 내용
--         수정을 불가능하게 만드는 옵션.












--[13] Top 쿼리
----  top 쿼리 : 상위 몇 개의 data만을 출력하고 싶을 때
--         . 사원중에서 입사일이 가장 빠른 사원 5명(top-5)만을
--           얻어오는 질의문.
--         . 사원중에서 급여를 가장 많이 받는 사원 7명만을
--           얻어오는 질의문.
--         . TOP-N을 구하기 위해 rownum & inline view가 사용.



--[rownum] 컬럼 값 출력

select rownum, a.* from emp a;

--inline view 인라인뷰를 이용한 rownum
select a.* from (select rownum rn, e.* from emp e order by e.hiredate ) a
where a.rn >= 2 and a.rn <= 7


select * from
(select rownum rnum, a.* from (select rownum rn, e.* from emp e order by e.hiredate ) a )
where rnum between 3 and 7



-- [rownum]의 특징
--     1. 오라클에서만 지원하는 기능.
--     2. 오름차순 정렬을 하더라도 rownum 컬럼 값은 바뀌지 않는다.
--     3. 오라클이 내부적으로 부여하는데, insert 문을 이용하여
--         입력하면 입력한 순서에 따라 1씩 증가되면서 값이 지정.
--     4. 정렬된 순서대로 rownum 컬럼 값이 매겨지도록 하려면
--         새로운 테이블이나 뷰로 새롭게 데이터를 저장해야만 한다.



create table memos (
    num  number(4) constraint memos_num_pk primary key,
    name varchar(20) constraint memos_name_nn not null,
    postdate date
);

create sequence memos_seq start with 1 increment by 1;

insert into memos(num, name) values(memos_seq.nextVal, '홍길동');
insert into memos(num, name) values(memos_seq.nextVal, '이순신');
insert into memos(num, name) values(memos_seq.nextVal, '이순신');
insert into memos(num, name) values(memos_seq.nextVal, '이순신');
insert into memos(num, name) values(memos_seq.nextVal, '이순신');

select * from memos;

--[4] 현재  시퀀스 어디까지 증가되어져 있는지 확인
-- 주의) 반드시 command 창에서 확인할 것.
select memos_seq. from dual;


--테이블 복사시 테이블구조와 내용만 복사될뿐, 제약조건은 복사되지 않는다
create table emp01 as select * from emp;
select * from user_ind_columns where table_name in ('EMP', 'EMP01')

set timing on

create index idx_emp01_ename on emp01(ename);

select * from user_index where table_name in (emp01)




-- DCL 권한 생성/삭제 system계정에 권한이 있다
c:\> sqlplus system/admin1234

create user thomas identified by tiger;
conn thomas/tiger

SQL> conn system/admin1234  --수행후 show user로 확인해본다
SQL> grant create session to thomas;
SQL> grant create table to thomas;


-- [테이블스페이스] 테이블스페이스는 디스크 공간을 소비하는 테이블과 뷰 그리고 그 밖의 다른 데이터 베이스 객체들이 저장
SQL> conn system/admin1234
SQL> alter user thomas quota 2m on system;
SQL> conn thomas/tiger
SQL> create table emp01(
     empno number(2),
     ename varchar2(10),
     job   varchar2(10),
     deptno number(2)
     );



c:\> sqlplus system/admin1234
SQL> create user tester1 identified by tiger;
SQL> grant create session to tester1;
SQL> grant create table to tester1;
SQL> alter user tester1 quota 2m on system;
SQL> conn tester1/tiger
SQL> grant ctreate session to thomas
SQL>
SQL>
c:\> sqlplus system/admin1234
SQL> create user tester2 identified by tiger;
SQL> grant create session to tester2 with admin option;
SQL> grant create table to tester2 ;
SQL> alter user tester2 quota 2m on system;
SQL>



SQL> grant select on emp to thomas;
SQL>
SQL>

--[14] 롤(Role)
-- 사용자에게 보다 효율적으로 권한을 부여할 수 있도록 여러개의 권한을 묶어 놓은것

--   1) connect Role
--       . 사용자가 데이터베이스에 접속 가능하도록 하기
--         위해서 다음과 같이 가장 기본적인 시스템 권한
--         8가지 묶어 놓은 권한.
--       . alter session, create cluster, create database link,
--         create sequence, create session, create synonym,
--         create table, create view

--   2) resource Role
--       . 사용자가 객체(테이블, 시퀀스, 뷰)를 생성할 수 있도록
--         시스템 권한을 묶어 놓은 것.
--       . create cluster, create procedure, create sequence,
--         create table, create trigger

--   3) DBA Role
--       . 사용자들이 소유한 데이터베이스 객체를 관리하고
--         사용자들이 작성하고 변경하고 제거할 수 있도록 하는
--         모든 권한을 가짐.


c:\> sqlplus system/admin1234
SQL> create user tester2 identified by tiger;
SQL> grant connect, resource to tester2;
SQL> conn tester2/tiger
SQL> select * from dict where table_name like '%ROLE%';


-- 오라클 - 동의어(synonym)
-- 객체를 조회할때 마다 일일이 객체의 소유자를 지정하는것이 번거로울 경우 동의어를 정의하면
긴이름대신 간단한 이름으로 접근할 수 있다
-- 종류
--   비공개 동의어 : 객체에 대한 접근권한을 부여받은 사용자가 정의한 동의어로 해당 사용자만 사용할 수 있다
--   공개 동의어 : 권한을 주는 사용자가 정의한 동의어로 누구나 사용할 수 있다, 공개 동의어는 DBA권한을 가진 사용자만이 생성 할 수 있다.
--               - SYNONYM 앞에 public을 붙여서 정의한다
--               - ex) dual은 원래 sys가 소유하는 테이블 명이므로 다른 사용자가 dual테이블에 접근하려면 sys.dual로 표현해야 하는 것이 원칙,
--                     모든 사용자가 sys.을 생략하고 접근한 것이 공개 동의어로 지정되어 있기 때문.
--[1] 테이블 생성후 객체권한 부여하기
SQL> conn system/admin1234
SQL> create table table_systbl(
    ename varchar2(20)
    );
SQL> insert into table_systbl values('이순신');
SQL> insert into table_systbl values('강감찬');

--scott 사용자(계정)에게 table_systbl이란 테이블에 select 권한 부여
SQL> grant select on table_systbl to scott;
SQL> conn scott/tiger
SQL> select * from table_systbl;
SQL> select * from system.table_systbl;

--[2] 동의어 생성 및 의미파악하기
SQL> conn system/admin1234
SQL> grant create synonym to scott;
SQL> conn scott/tiger
SQL> create  synonym systab for system.table_systbl
SQL> select * from systab;

--[3] 비공개 동의어 생성 및 의미
--    - 사용자 정의롤을 생성한 후에 사용자 정의 롤에 connection, resource role과 create synonym권한과
--      scott소유자의 emp테이블과 dept테이블에 대한 select 객체권한을 role에 부여
SQL> conn system/admin1234
SQL> create role test_role;
SQL> grant connect, resource, create synonym to test_role;
SQL> grant select on scott.dept to test_role;
SQL> grant select on scott.emp to test_role;

-- 사용자 생성 밀 role 부여
SQL> create user tester10 identified by tiger;
SQL> grant test_role to tester10 ;
SQL> create user tester11 identified by tiger;
SQL> grant test_role to tester11 ;

SQL> grant select on scott.dept to tester10

SQL> conn tester10/tiger;
SQL> create synonym dept for scott.dept;
SQL> select * from dept;

SQL> conn tester11/tiger;
SQL> select * from dept;